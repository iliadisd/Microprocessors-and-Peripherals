#!/usr/bin/python
from redBlocks import *
from redBlocksTest import *

# This script was generated by the redBlocks Simulator's test script recorder.
# It serves for demonstration purposes and tests the workflow to buy a product.
# It needs to be started with all slots being unblocked and will leave the system with one bottle being retrieved from the second slot.

scf = SimulatorConnectionFactory()

# Registration of interfaces
scf.registerDO("Product 4 Lamp")
scf.registerDO("Product 3 Lamp")
scf.registerDO("Product 2 Lamp")
scf.registerDO("Product 1 Lamp")
scf.registerDO("Dispense Bay Lamp")
scf.registerDO("Change Bay Lamp")
scf.registerDO("Open Cash Box Actor")
scf.registerDO("Cash Box Return Actor")
scf.registerDO("Product 1 Release Gear")
scf.registerDO("Product 2 Release Gear")
scf.registerDO("Product 3 Release Gear")
scf.registerDO("Product 4 Release Gear")
scf.registerCC("GSM Modem")
scf.registerDP("Display")
scf.registerDI("Product 4 Button")
scf.registerDI("Product 3 Button")
scf.registerDI("Product 2 Button")
scf.registerDI("Product 1 Button")
scf.registerSBO("Euro100")
scf.registerSBO("Euro50")
scf.registerSBO("Euro20")
scf.registerSBO("Euro10")
sc = scf.create()

# Define set of interfaces to observe
observer = Observer()
observer.add(sc.DO("Product 4 Lamp"))
observer.add(sc.DO("Product 3 Lamp"))
observer.add(sc.DO("Product 2 Lamp"))
observer.add(sc.DO("Product 1 Lamp"))
observer.add(sc.DO("Dispense Bay Lamp"))
observer.add(sc.DO("Change Bay Lamp"))
observer.add(sc.DO("Open Cash Box Actor"))
observer.add(sc.DO("Cash Box Return Actor"))
observer.add(sc.DO("Product 1 Release Gear"))
observer.add(sc.DO("Product 2 Release Gear"))
observer.add(sc.DO("Product 3 Release Gear"))
observer.add(sc.DO("Product 4 Release Gear"))
observer.add(sc.CC("GSM Modem"), 0.10)
observer.add(sc.DP("Display"), 0.10)

# time tolerance: adjust to a suitable value depending on the latency of the test setup
TOL = 0.20
observer.setTolerance(TOL)

observer.start()
time = observer.getTime()


# Test Preconditions
observer[sc.DO("Product 4 Lamp")].checkData(False)
observer[sc.DO("Product 3 Lamp")].checkData(False)
observer[sc.DO("Product 2 Lamp")].checkData(False)
observer[sc.DO("Product 1 Lamp")].checkData(False)
observer[sc.DO("Dispense Bay Lamp")].checkData(False)
observer[sc.DO("Change Bay Lamp")].checkData(False)
observer[sc.DO("Open Cash Box Actor")].checkData(True)
observer[sc.DO("Cash Box Return Actor")].checkData(False)
observer[sc.DO("Product 1 Release Gear")].checkData(False)
observer[sc.DO("Product 2 Release Gear")].checkData(False)
observer[sc.DO("Product 3 Release Gear")].checkData(False)
observer[sc.DO("Product 4 Release Gear")].checkData(False)
observer[sc.DP("Display")].checkData(DisplayData.fromFileContents(binaryData('2.rbb')))

observer.sleep(1.136)

time = observer.getTime()
sc.DI("Product 4 Button").setValue(True)

observer[sc.DO("Product 4 Lamp")].addNoChangeCheck(time + 0.01 - TOL)
observer[sc.DO("Product 4 Lamp")].addEventCheck(time + 0.01 + TOL, True)

observer[sc.DP("Display")].addNoChangeCheck(time + 0.02 - TOL)
observer[sc.DP("Display")].addEventCheck(time + 0.02 + TOL, DisplayData.fromFileContents(binaryData('3.rbb')))

observer.sleep(0.127)

time = observer.getTime()
sc.DI("Product 4 Button").setValue(False)

observer.sleep(0.752)

time = observer.getTime()
sc.DI("Product 3 Button").setValue(True)

observer[sc.DO("Product 3 Lamp")].addNoChangeCheck(time + 0.02 - TOL)
observer[sc.DO("Product 3 Lamp")].addEventCheck(time + 0.02 + TOL, True)

observer[sc.DO("Product 4 Lamp")].addNoChangeCheck(time + 0.02 - TOL)
observer[sc.DO("Product 4 Lamp")].addEventCheck(time + 0.02 + TOL, False)

observer[sc.DP("Display")].addNoChangeCheck(time + 0.02 - TOL)
observer[sc.DP("Display")].addEventCheck(time + 0.02 + TOL, DisplayData.fromFileContents(binaryData('4.rbb')))

observer.sleep(0.096)

time = observer.getTime()
sc.DI("Product 3 Button").setValue(False)

observer.sleep(0.715)

time = observer.getTime()
sc.DI("Product 2 Button").setValue(True)

observer[sc.DO("Product 2 Lamp")].addNoChangeCheck(time + 0.02 - TOL)
observer[sc.DO("Product 2 Lamp")].addEventCheck(time + 0.02 + TOL, True)

observer[sc.DO("Product 3 Lamp")].addNoChangeCheck(time + 0.02 - TOL)
observer[sc.DO("Product 3 Lamp")].addEventCheck(time + 0.02 + TOL, False)

observer[sc.DP("Display")].addNoChangeCheck(time + 0.02 - TOL)
observer[sc.DP("Display")].addEventCheck(time + 0.02 + TOL, DisplayData.fromFileContents(binaryData('5.rbb')))

observer.sleep(0.093)

time = observer.getTime()
sc.DI("Product 2 Button").setValue(False)

observer.sleep(0.722)

time = observer.getTime()
sc.DI("Product 1 Button").setValue(True)

observer[sc.DO("Product 1 Lamp")].addNoChangeCheck(time + 0.02 - TOL)
observer[sc.DO("Product 1 Lamp")].addEventCheck(time + 0.02 + TOL, True)

observer[sc.DO("Product 2 Lamp")].addNoChangeCheck(time + 0.02 - TOL)
observer[sc.DO("Product 2 Lamp")].addEventCheck(time + 0.02 + TOL, False)

observer[sc.DP("Display")].addNoChangeCheck(time + 0.02 - TOL)
observer[sc.DP("Display")].addEventCheck(time + 0.02 + TOL, DisplayData.fromFileContents(binaryData('6.rbb')))

observer.sleep(0.102)

time = observer.getTime()
sc.DI("Product 1 Button").setValue(False)

observer.sleep(0.986)

time = observer.getTime()
sc.DI("Product 3 Button").setValue(True)

observer[sc.DO("Product 1 Lamp")].addNoChangeCheck(time + 0.02 - TOL)
observer[sc.DO("Product 1 Lamp")].addEventCheck(time + 0.02 + TOL, False)

observer[sc.DO("Product 3 Lamp")].addNoChangeCheck(time + 0.02 - TOL)
observer[sc.DO("Product 3 Lamp")].addEventCheck(time + 0.02 + TOL, True)

observer[sc.DP("Display")].addNoChangeCheck(time + 0.02 - TOL)
observer[sc.DP("Display")].addEventCheck(time + 0.02 + TOL, DisplayData.fromFileContents(binaryData('4.rbb')))

observer.sleep(0.085)

time = observer.getTime()
sc.DI("Product 3 Button").setValue(False)

observer.sleep(1.083)

time = observer.getTime()
sc.SBO("Euro100").setValue(True)

observer[sc.DP("Display")].addNoChangeCheck(time + 0.03 - TOL)
observer[sc.DP("Display")].addEventCheck(time + 0.03 + TOL, DisplayData.fromFileContents(binaryData('7.rbb')))

observer.sleep(0.094)

time = observer.getTime()
sc.SBO("Euro100").setValue(False)

observer.sleep(0.745)

time = observer.getTime()
sc.SBO("Euro50").setValue(True)

observer[sc.DP("Display")].addNoChangeCheck(time + 0.04 - TOL)
observer[sc.DP("Display")].addEventCheck(time + 0.04 + TOL, DisplayData.fromFileContents(binaryData('8.rbb')))

observer.sleep(0.089)

time = observer.getTime()
sc.SBO("Euro50").setValue(False)

observer.sleep(0.703)

time = observer.getTime()
sc.SBO("Euro20").setValue(True)

observer[sc.DP("Display")].addNoChangeCheck(time + 0.03 - TOL)
observer[sc.DP("Display")].addEventCheck(time + 0.03 + TOL, DisplayData.fromFileContents(binaryData('9.rbb')))

observer.sleep(0.107)

time = observer.getTime()
sc.SBO("Euro20").setValue(False)

observer.sleep(0.753)

time = observer.getTime()
sc.SBO("Euro10").setValue(True)

observer[sc.DO("Product 3 Release Gear")].addNoChangeCheck(time + 0.03 - TOL)
observer[sc.DO("Product 3 Release Gear")].addEventCheck(time + 0.03 + TOL, True)

observer[sc.DO("Product 3 Lamp")].addNoChangeCheck(time + 0.03 - TOL)
observer[sc.DO("Product 3 Lamp")].addEventCheck(time + 0.03 + TOL, False)

observer[sc.DP("Display")].addNoChangeCheck(time + 0.03 - TOL)
observer[sc.DP("Display")].addEventCheck(time + 0.03 + TOL, DisplayData.fromFileContents(binaryData('10.rbb')))

observer.sleep(0.203)

time = observer.getTime()
sc.SBO("Euro10").setValue(False)

observer[sc.DO("Cash Box Return Actor")].addNoChangeCheck(time + 0.82 - TOL)
observer[sc.DO("Cash Box Return Actor")].addEventCheck(time + 0.82 + TOL, True)

observer[sc.DO("Product 3 Release Gear")].addNoChangeCheck(time + 0.83 - TOL)
observer[sc.DO("Product 3 Release Gear")].addEventCheck(time + 0.83 + TOL, False)

observer[sc.DP("Display")].addNoChangeCheck(time + 0.83 - TOL)
observer[sc.DP("Display")].addEventCheck(time + 0.83 + TOL, DisplayData.fromFileContents(binaryData('11.rbb')))

observer[sc.DO("Open Cash Box Actor")].addNoChangeCheck(time + 1.82 - TOL)
observer[sc.DO("Open Cash Box Actor")].addEventCheck(time + 1.82 + TOL, False)

observer[sc.DO("Dispense Bay Lamp")].addNoChangeCheck(time + 2.32 - TOL)
observer[sc.DO("Dispense Bay Lamp")].addEventCheck(time + 2.32 + TOL, True)

observer[sc.DO("Dispense Bay Lamp")].addNoChangeCheck(time + 2.82 - TOL)
observer[sc.DO("Dispense Bay Lamp")].addEventCheck(time + 2.82 + TOL, False)

observer[sc.DO("Dispense Bay Lamp")].addNoChangeCheck(time + 3.32 - TOL)
observer[sc.DO("Dispense Bay Lamp")].addEventCheck(time + 3.32 + TOL, True)

observer[sc.DO("Dispense Bay Lamp")].addNoChangeCheck(time + 3.82 - TOL)
observer[sc.DO("Dispense Bay Lamp")].addEventCheck(time + 3.82 + TOL, False)

observer[sc.DO("Dispense Bay Lamp")].addNoChangeCheck(time + 4.32 - TOL)
observer[sc.DO("Dispense Bay Lamp")].addEventCheck(time + 4.32 + TOL, True)

observer[sc.DO("Cash Box Return Actor")].addNoChangeCheck(time + 4.82 - TOL)
observer[sc.DO("Cash Box Return Actor")].addEventCheck(time + 4.82 + TOL, False)

observer[sc.DO("Open Cash Box Actor")].addNoChangeCheck(time + 4.82 - TOL)
observer[sc.DO("Open Cash Box Actor")].addEventCheck(time + 4.82 + TOL, True)

observer[sc.DO("Dispense Bay Lamp")].addNoChangeCheck(time + 4.82 - TOL)
observer[sc.DO("Dispense Bay Lamp")].addEventCheck(time + 4.82 + TOL, False)

observer[sc.DO("Dispense Bay Lamp")].addNoChangeCheck(time + 5.33 - TOL)
observer[sc.DO("Dispense Bay Lamp")].addEventCheck(time + 5.33 + TOL, True)

observer[sc.DO("Dispense Bay Lamp")].addNoChangeCheck(time + 5.82 - TOL)
observer[sc.DO("Dispense Bay Lamp")].addEventCheck(time + 5.82 + TOL, False)

observer[sc.DO("Dispense Bay Lamp")].addNoChangeCheck(time + 6.32 - TOL)
observer[sc.DO("Dispense Bay Lamp")].addEventCheck(time + 6.32 + TOL, True)

observer[sc.DO("Dispense Bay Lamp")].addNoChangeCheck(time + 6.82 - TOL)
observer[sc.DO("Dispense Bay Lamp")].addEventCheck(time + 6.82 + TOL, False)

observer[sc.DP("Display")].addNoChangeCheck(time + 7.33 - TOL)
observer[sc.DP("Display")].addEventCheck(time + 7.33 + TOL, DisplayData.fromFileContents(binaryData('2.rbb')))

observer.sleep(10.130 + TOL)

time = observer.getTime()

# Test end conditions
observer[sc.DO("Product 4 Lamp")].addNoChangeCheck(time - TOL)
observer[sc.DO("Product 3 Lamp")].addNoChangeCheck(time - TOL)
observer[sc.DO("Product 2 Lamp")].addNoChangeCheck(time - TOL)
observer[sc.DO("Product 1 Lamp")].addNoChangeCheck(time - TOL)
observer[sc.DO("Dispense Bay Lamp")].addNoChangeCheck(time - TOL)
observer[sc.DO("Change Bay Lamp")].addNoChangeCheck(time - TOL)
observer[sc.DO("Open Cash Box Actor")].addNoChangeCheck(time - TOL)
observer[sc.DO("Cash Box Return Actor")].addNoChangeCheck(time - TOL)
observer[sc.DO("Product 1 Release Gear")].addNoChangeCheck(time - TOL)
observer[sc.DO("Product 2 Release Gear")].addNoChangeCheck(time - TOL)
observer[sc.DO("Product 3 Release Gear")].addNoChangeCheck(time - TOL)
observer[sc.DO("Product 4 Release Gear")].addNoChangeCheck(time - TOL)
observer[sc.CC("GSM Modem")].addNoChangeCheck(time - TOL)
observer[sc.DP("Display")].addNoChangeCheck(time - TOL)

observer.stop()
